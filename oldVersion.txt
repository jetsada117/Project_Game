import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

public class DemoServer extends JFrame{
    JLabel address = new JLabel();
    JPanel container = new JPanel();
    JPanel [] box = new JPanel[4];
    JLabel [] User = new JLabel[4];

    public DemoServer() {
        this.setSize(1000,600);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setLayout(new BorderLayout());

        container.setLayout(new GridLayout(2,2,5,5));
        address.setFont(new Font("Tahoma", Font.BOLD, 20));

        add(address, BorderLayout.NORTH);
        add(container, BorderLayout.CENTER);

        for (int i = 0; i < User.length ; i++) {
            box[i] = new JPanel();
            box[i].setBackground(Color.cyan);
            box[i].setLayout(new BorderLayout());
            container.add(box[i]);

            User[i] = new JLabel("Player " + (i+1));
            User[i].setHorizontalAlignment(SwingConstants.CENTER);
            User[i].setFont(new Font("Tahoma", Font.BOLD, 30));
            box[i].add(User[i], BorderLayout.CENTER);
        }
    }

    public static void main(String[] args) {
        DemoServer server = new DemoServer();
        ServerThread thread = new ServerThread(server);
        thread.start();
        server.setVisible(true);

        try {
            InetAddress ip = InetAddress.getLocalHost();
            server.address.setText(ip.getHostAddress());
            server.address.setHorizontalAlignment(SwingConstants.CENTER);
        } catch (Exception e) {}
    }
}


class ServerThread extends Thread {
    DemoServer server;
    PlayerServer [] playerServers = new PlayerServer[4]; 
    HashMap <String, Integer> players = new HashMap<>();
    int index = 0;

    public ServerThread(DemoServer server) {
        this.server = server;
    }

    @Override
    public void run() {
        ServerSocket serverSock;

        try {
            serverSock = new ServerSocket(50101);

            while (true) {
                String line = "";
                Socket socket = serverSock.accept();
                String clientIP = socket.getInetAddress().getHostAddress();
                InputStream input = socket.getInputStream();

                // รับค่าแบบเป็น String ปกติ
                // InputStreamReader reader = new InputStreamReader(input);
                // BufferedReader buffer = new BufferedReader(reader);

                // รับค่าแบบเป็น object
                ObjectInputStream objectInput = new ObjectInputStream(input);
                Object receivedObject = objectInput.readObject();
                
                System.out.println("Connected with client IP: " + clientIP);
                // try {
                //     if (buffer.ready()) {
                //         while ((line = buffer.readLine()) != null) {

                //             // ตอน Test เก็บเป็นชื่อ user ก่อน ตอนใช้จริงค่อยเก็บ ip
                //             if (!players.containsKey(line) && index < 4) {
                //                 players.put(line, index);
                //                 server.User[index].setText(line);
                //                 playerServers[index] = new PlayerServer();
                //                 PlayerThread thread = new PlayerThread(playerServers[index], index,clientIP);
                //                 thread.start();

                //                 index++;
                //             }
                //         }
                //     }
                // } catch (IOException e) {
                //     System.out.println(e);
                // }


                try {       
                    if (receivedObject != null) {
                        // ตรวจสอบว่า object ที่รับเข้ามาเป็นประเภทใด เช่น Player
                        if (receivedObject instanceof Player player) {
                            System.out.println("Received object: " + player.getName());
                            server.User[index].setText(player.getName());
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e);
                }


            }
        } catch (Exception e) {

        }
    }   
}

// class PlayerThread extends Thread {
//     PlayerServer playerServer;
//     int index;
//     String clientIP;

//     public PlayerThread(PlayerServer playerServer, int index, String clientIP) {
//         this.playerServer = playerServer;
//         this.index = index;
//         this.clientIP = clientIP;
//     }

//     @Override
//     public void run() {
//         while (true) {
//             //System.out.println("Player "+ index +" IP : "+ clientIP);
//             try {
//                 Thread.sleep(500);
//             } catch (InterruptedException e) {

//             }
//         }
//     }
// }

------------------------------------------------------------------------------------

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

class ClientMessage extends JFrame implements ActionListener{
    JTextField ip = new JTextField();
    JTextField textString = new JTextField();
    JButton buttonString = new JButton("Send Message");
    JButton buttonObject = new JButton("Send Object");

    public ClientMessage() {
        this.setSize(600,125);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setLayout(new BorderLayout());

        this.add(ip, BorderLayout.NORTH);
        this.add(textString, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 2));  // จัดเรียงปุ่มในแถวเดียวกัน
        buttonPanel.add(buttonString);
        buttonPanel.add(buttonObject);
        add(buttonPanel, BorderLayout.SOUTH);

        buttonString.addActionListener(this);
        buttonObject.addActionListener(this);
    }

    public static void main(String[] args) {
        ClientMessage frame = new ClientMessage();
        frame.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // if (e.getSource() == buttonString) {
        //     try {
        //         System.out.println("button string");
        //         Socket socket = new Socket(ip.getText(), 50101);
        //         PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
        //         String message = "#" + textString.getText(); 

        //         writer.println(message);
        //         writer.close();
        //     } catch (Exception ex) {
        //         System.out.println(e);
        //     }
        // }
        // else 
        if (e.getSource() == buttonObject) {
            System.out.println("button object");
            try (Socket socket = new Socket(ip.getText(), 50101)) {
                ObjectOutputStream objectOutput = new ObjectOutputStream(socket.getOutputStream());
                Player player = new Player(textString.getText(), 100);  // Object ที่ต้องการส่ง
                objectOutput.writeObject(player);
            } catch (IOException e1) {
                System.out.println(e);
            }
        }
    }
}